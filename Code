import numpy as np
import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from google.colab import files
import os

def kmeans(X, k, max_iters=1000, epsilon=1e-4):
    np.random.seed(42)
    centroids = X[np.random.choice(len(X), k, replace=False)]

    for _ in range(max_iters):
        distances = np.linalg.norm(X[:, None] - centroids[None, :], axis=2)
        labels = np.argmin(distances, axis=1)

        new_centroids = np.array([
            X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i]
            for i in range(k)
        ])

        shift = np.linalg.norm(new_centroids - centroids)
        if shift < epsilon:
            break

        centroids = new_centroids

    return labels, centroids

def segment_image_with_kmeans(image_path, k):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    pixel_values = image.reshape((-1, 3)).astype(np.float32)
    labels, centroids = kmeans(pixel_values, k)
    segmented_image = centroids[labels].reshape(image.shape).astype(np.uint8)
    return image, segmented_image, labels.reshape(image.shape[:2])

def extract_number_mask(labels, target_cluster):
    return (labels == target_cluster).astype(np.uint8) * 255

def refine_mask(mask):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    opened = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel, iterations=2)
    closed = cv2.morphologyEx(opened, cv2.MORPH_CLOSE, kernel, iterations=2)
    return closed

def upload_image():
    uploaded = files.upload()
    for filename in uploaded.keys():
        return filename
    return None

def main():
    # Create directories if they don't exist
    os.makedirs('Input', exist_ok=True)
    os.makedirs('Output', exist_ok=True)

    # Upload image
    print("Please upload your image:")
    image_path = upload_image()
    if not image_path:
        print("No image uploaded. Exiting.")
        return

    # Move uploaded file to Input directory
    os.rename(image_path, f"Input/{image_path}")
    image_path = f"Input/{image_path}"

    k = 12  # Number of clusters
    original, segmented, label_map = segment_image_with_kmeans(image_path, k)

    # Plot all clusters
    print("\nShowing individual clusters to help pick the one with the number:")
    cluster_masks = []
    plt.figure(figsize=(15, 10))
    for i in range(k):
        raw_mask = extract_number_mask(label_map, target_cluster=i)
        refined_mask = refine_mask(raw_mask)
        cluster_masks.append(refined_mask)

        plt.subplot(3, 4, i+1)
        plt.imshow(refined_mask, cmap='gray')
        plt.title(f"Cluster {i}")
        plt.axis('off')
    plt.tight_layout()
    plt.show()

    # Get user input for target clusters
    TARGET_CLUSTERS = input("Enter the cluster indices (comma-separated) that contain the number: ")
    target_indices = [int(i.strip()) for i in TARGET_CLUSTERS.split(",")]

    # Combine selected cluster masks
    combined_mask = np.zeros_like(cluster_masks[0])
    for idx in target_indices:
        combined_mask = cv2.bitwise_or(combined_mask, cluster_masks[idx])
    number_mask = combined_mask

    # Save and show results
    output_filename = f"Output/{os.path.splitext(os.path.basename(image_path))[0]}_number_mask.png"
    cv2.imwrite(output_filename, number_mask)

    plt.figure(figsize=(15, 5))
    plt.subplot(1, 3, 1)
    plt.title("Original Image")
    plt.imshow(original)
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.title("Segmented Image")
    plt.imshow(segmented)
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.title("Extracted Number Mask")
    plt.imshow(number_mask, cmap='gray')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

    # Download the result
    print("\nDownloading the result...")
    files.download(output_filename)

if __name__ == "__main__":
    main()
